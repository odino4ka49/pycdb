/** * Created by 1ka on 4/5/14. */ZOOMPYCDB.namespace("ZOOMPYCDB.TemplatesView");ZOOMPYCDB.TemplatesView = function(model,elements){    var model = model,		canvas = elements.canvas,        templates,        tree = d3.layout.tree().nodeSize([0, 20]),        margin = {top: 30, right: 20, bottom: 30, left: 12},        canvas_width = parseInt(canvas.style("width"));		width = canvas_width - margin.left - margin.right,	    barHeight = 20,	    barWidth = width * .8,        tree_canvas = canvas.append("g").attr("transform", "translate("+margin.left+","+margin.top+")");        var nodes;        //update data        update = function(){            if(canvas===undefined)                return;			    			templates = model.getTemplateData();			if(templates){				templates.x0=0;				templates.y0=0;				refresh(templates);			}		},					refresh = function(source){			var i = 0,			    duration = 400;			var diagonal = d3.svg.diagonal()			    .projection(function(d) { return [d.y, d.x]; });			nodes = tree.nodes(templates);            canvas.transition().duration(duration);            nodes.forEach(function(n, i) {    			n.x = i * barHeight;  			});            var node = tree_canvas.selectAll("g.template_node")			    .data(nodes, function(d) { return d.id || (d.id = ++i); });						var nodeEnter = node.enter().append("g")			  .attr("class", "template_node")			  .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })			  .style("opacity", 1e-6);						  // Enter any new nodes at the parent's previous position.			  nodeEnter.append("rect")			  .attr("y", -barHeight/2)			  .attr("height", barHeight)			  .attr("width", barWidth)			  .style("fill", color)			  .on("click", click);						  nodeEnter.append("text")				  .attr("dy", 3.5)				  .attr("dx", 5.5)			      .text(function(d) { return d.name; });						  // Transition nodes to their new position.			  nodeEnter.transition()			      .duration(duration)			      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })			  .style("opacity", 1);						  node.transition()			      .duration(duration)			      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })			  .style("opacity", 1)			.select("rect")			  .style("fill", color);						  // Transition exiting nodes to the parent's new position.			  node.exit().transition()			      .duration(duration)			      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })			  .style("opacity", 1e-6)			  .remove();			  			  var link = tree_canvas.selectAll("path.template_link")			      .data(tree.links(nodes), function(d) { return d.target.id; });						  // Enter any new links at the parent's previous position.			  link.enter().insert("path", "g")			      .attr("class", "template_link")			      .attr("d", function(d) {			        var o = {x: source.x0, y: source.y0};			        return diagonal({source: o, target: o});			      })			    .transition()			      .duration(duration)			      .attr("d", diagonal);						  // Transition links to their new position.			  link.transition()			      .duration(duration)			      .attr("d", diagonal);						  // Transition exiting nodes to the parent's new position.			  link.exit().transition()			      .duration(duration)			      .attr("d", function(d) {			        var o = {x: source.x, y: source.y};			        return diagonal({source: o, target: o});			      })			      .remove();			      			  nodes.forEach(function(d) {			    d.x0 = d.x;			    d.y0 = d.y;			  });		},				click = function(d) {			nodes.forEach(function(n){				n.selected = false;			});			if (d.children) {			    d._children = d.children;			    d.children = null;			} else if(d._children) {			    d.children = d._children;			    d._children = null;			} else if(d.selected){				d.selected = false;			} else {				d.selected = true;			}			refresh(d);		},				color = function(d) {		 	return d._children ? "#00EBB4" : d.children ? "#21E8CF" : d.selected ? "#00AAFF" : "#31E7FF"; //166873 - для выбранного		},    $(document).on("config_changed",function(){        update();    });    return {        refresh: refresh    };};